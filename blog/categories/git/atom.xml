<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Ri Xu's Blog]]></title>
  <link href="http://Luxurioust.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://Luxurioust.github.io/"/>
  <updated>2014-09-13T10:15:41+08:00</updated>
  <id>http://Luxurioust.github.io/</id>
  <author>
    <name><![CDATA[Ri Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configure Git and Github]]></title>
    <link href="http://Luxurioust.github.io/blog/2014/09/13/configure-git-and-github.html"/>
    <updated>2014-09-13T00:13:33+08:00</updated>
    <id>http://Luxurioust.github.io/blog/2014/09/13/configure-git-and-github</id>
    <content type="html"><![CDATA[<h3>Git</h3>

<p>Git是一个分布式版本控制／软件配置管理软件，原是Linux内核开发者林纳斯·托瓦兹（Linus Torvalds）为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive Tools（一个类似Norton Commander界面的文件管理器）有所不同。</p>

<p>Git最初的开发动力来自于BitKeeper和Monotone。Git最初只是作为一个可以被其他前端（比如Cogito或StGIT）包装的后端而开发的，但后来Git内核已经成熟到可以独立地用作版本控制。很多著名的软件都使用Git进行版本控制，其中包括Linux内核、X.Org服务器和OLPC内核等项目的开发流程。</p>

<p>官方网站：<a href="http://git-scm.com">git-scm.com</a></p>

<!-- more -->


<h3>GitHUb</h3>

<p>GitHub 是一个共享虚拟主机服务，用于存放使用Git版本控制的软件代码和内容项目。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。</p>

<p>GitHub同时提供付费账户和为开源项目提供的免费账户。根据在2009年的Git用户调查，GitHub是最流行的Git存取站点。除了允许个人和组织建立和存取代码库以外，它也提供了一些方便社会化软件开发的功能，包括允许用户跟踪其他用户、组织、软件库的动态，对软件代码的改动和 bug 提出评论等。GitHub也提供了图表功能，用于显示开发者们怎样在代码库上工作以及软件的开发活跃程度。</p>

<p>GitHub也提供一个粘贴箱风格的站点Gist，供软件代码库使用的Wiki，以及通过git版本库进行编辑和管理的网页托管功能。</p>

<p>网站：<a href="http://github.com">github.com</a></p>

<p>好了，让我们开始吧。</p>

<p>首先在Git的官方网站上下载系统所适合的客户端，如果你是Mac或Linux用户，也可以使用终端。</p>

<p><img src="http://ww3.sinaimg.cn/large/a40b648ftw1eka5zrsov1j20e90b2wfa.jpg" alt="安装Git GUI Client" /></p>

<p><img src="http://ww4.sinaimg.cn/large/a40b648ftw1eka5zrzr9uj20e90b2abi.jpg" alt="安装Git GUI Client" /></p>

<p><img src="http://ww3.sinaimg.cn/large/a40b648ftw1eka5zsj03nj20e90b2t9g.jpg" alt="安装Git GUI Client" /></p>

<p><img src="http://ww2.sinaimg.cn/large/a40b648ftw1eka5zsrl5sj20e90b2gms.jpg" alt="安装Git GUI Client" /></p>

<p><img src="http://ww1.sinaimg.cn/mw690/a40b648ftw1eka5ztu5ecj20e90b2wg3.jpg" alt="安装Git GUI Client" /></p>

<p><img src="http://ww1.sinaimg.cn/large/a40b648ftw1eka5zticxnj20e90b2t9g.jpg" alt="安装Git GUI Client" /></p>

<p><img src="http://ww4.sinaimg.cn/large/a40b648ftw1eka5zu990cj20e90b2q4l.jpg" alt="安装Git GUI Client" /></p>

<p><img src="http://ww4.sinaimg.cn/large/a40b648ftw1eka5zulucvj20e90b2wez.jpg" alt="安装Git GUI Client" /></p>

<p><img src="http://ww2.sinaimg.cn/large/a40b648ftw1eka5zv8r9jj20e90b2q3m.jpg" alt="安装Git GUI Client" /></p>

<h3>配置Git软件并基于SSH生产密钥</h3>

<p>产生一个新的SSH密钥。当提示“Enter a file in which to save the key”时仅仅按Enter就可以保持默认设置。</p>

<p>```
$ ssh-keygen -t rsa -C &ldquo;<a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#121;&#x6f;&#x75;&#x72;&#x5f;&#101;&#x6d;&#x61;&#x69;&#108;&#x40;&#121;&#111;&#117;&#x72;&#x65;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#121;&#111;&#x75;&#114;&#95;&#101;&#x6d;&#x61;&#105;&#108;&#64;&#x79;&#111;&#x75;&#x72;&#x65;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a>&rdquo;</p>

<h1>Creates a new ssh key using the provided email</h1>

<h1>Generating public/private rsa key pair.# Enter file in which to save the key (/home/you/.ssh/id_rsa):</h1>

<p>```</p>

<p>回车后会提示输入密码并确认密码：</p>

<p><code>
Enter passphrase (empty for no passphrase): [Type a passphrase]# Enter same passphrase again: [Type passphrase again]
</code></p>

<p>然后看到类似这样的信息即表明密钥生成成功了：</p>

<p>```
Your identification has been saved in /home/you/.ssh/id_rsa.</p>

<h1>Your public key has been saved in /home/you/.ssh/id_rsa.pub.# The key fingerprint is:</h1>

<h1>01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#121;&#111;&#117;&#x72;&#95;&#x65;&#109;&#x61;&#x69;&#108;&#x40;&#121;&#111;&#117;&#x72;&#x65;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#121;&#111;&#x75;&#x72;&#95;&#x65;&#109;&#x61;&#x69;&#x6c;&#64;&#x79;&#111;&#117;&#x72;&#x65;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></h1>

<p>```
<img src="http://ww4.sinaimg.cn/large/a40b648ftw1eka5zvpqcoj20it0evjtq.jpg" alt="生成SSH密钥" />
<img src="http://ww4.sinaimg.cn/large/a40b648ftw1eka5zvv0qhj20ic0axwfx.jpg" alt="生成SSH密钥" /></p>

<h3>注册一个GitHub账号</h3>

<p><img src="http://ww4.sinaimg.cn/large/a40b648ftw1eka5zxk6thj20m80r50v3.jpg" alt="注册GitHub账号" /></p>

<p>在Github服务器端输入SSH 密钥并检测连接的成功性，登录自己的Github帐号，进入“Account settings/SSH Keys”，输入刚才产生的密钥即可。</p>

<p><img src="http://ww4.sinaimg.cn/large/a40b648ftw1eka5zwsyakj20kx0fzwgk.jpg" alt="输入SSH" /></p>

<p>然后就可以尝试着检测一下SSH连接git到Github服务器了：</p>

<p>```
$ ssh -T <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x67;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#46;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;</a></p>

<h1>Attempts to ssh to github</h1>

<p>```</p>

<p>可能会看到这样的警告，但没有关系，输入“yes”回车：</p>

<p><code>
The authenticity of host 'github.com (207.97.227.239)' can't be established.# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.# Are you sure you want to continue connecting (yes/no)?
</code></p>

<p>最后就可以看到这样的连接成功的消息了：</p>

<p>```
Hi username! You&rsquo;ve successfully authenticated, but GitHub does not</p>

<h1>provide shell access.</h1>

<p>```</p>

<p><img src="http://ww3.sinaimg.cn/large/a40b648ftw1eka5zwjf8pj20is0ax75x.jpg" alt="连接成功的消息" /></p>

<p>```
$ git config &mdash;global user.name &ldquo;Your Name Here&rdquo;</p>

<h1>Sets the default name for git to use when you commit</h1>

<p>$ git config &mdash;global user.email &ldquo;<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#58;&#121;&#x6f;&#117;&#114;&#95;&#101;&#x6d;&#97;&#x69;&#x6c;&#x40;&#121;&#111;&#117;&#114;&#101;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;">&#121;&#111;&#117;&#114;&#95;&#101;&#109;&#97;&#x69;&#108;&#x40;&#x79;&#111;&#117;&#x72;&#101;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a>&rdquo;</p>

<h1>Sets the default email for git to use when you commit</h1>

<p>```</p>

<h2>简易使用参考</h2>

<h3>简单的上传下载方法</h3>

<p>上传一个文件到Github，先需要在Github建立一个repo，然后上传。例如建立“Hello-world”文件并上传到刚建立的repo：</p>

<p>```
$ mkdir ~/Hello-World</p>

<h1>Creates a directory for your project called &ldquo;Hello-World&rdquo; in your user directory</h1>

<p>cd ~/Hello-World</p>

<h1>Changes the current working directory to your newly created directory</h1>

<p>git init</p>

<h1>Sets up the necessary Git files</h1>

<h1>Initialized empty Git repository in /Users/you/Hello-World/.git/</h1>

<p>touch README</p>

<h1>Creates a file called &ldquo;README&rdquo; in your Hello-World directory</h1>

<p>$ git add README</p>

<h1>Stages your README file, adding it to the list of files to be committed</h1>

<p>git commit -m &lsquo;first commit&rsquo;</p>

<h1>Commits your files, adding the message &ldquo;first commit&rdquo;</h1>

<p>$ git remote add origin <a href="https://github.com/username/Hello-World.git">https://github.com/username/Hello-World.git</a></p>

<h1>Creates a remote named &ldquo;origin&rdquo; pointing at your GitHub repogit push origin master# Sends your commits in the &ldquo;master&rdquo; branch to GitHub</h1>

<p>```</p>

<h3>创建新仓库</h3>

<p>创建新文件夹，打开，然后执行</p>

<p><code>
git init
</code></p>

<p>以创建新的 git 仓库。</p>

<h3>检出仓库</h3>

<p>执行如下命令以创建一个本地仓库的克隆版本：</p>

<p><code>
git clone /path/to/repository
</code></p>

<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>

<p><code>
git clone username@host:/path/to/repository
</code></p>

<h3>添加与提交</h3>

<p>你可以计划改动（把它们添加到缓存区），使用如下命令：</p>

<p><code>
git add &lt;filename&gt;
</code></p>

<p><code>
git add *
</code></p>

<p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>

<p><code>
git commit -m "代码提交信息"
</code></p>

<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>

<h3>推送改动</h3>

<p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>

<p><code>
git push origin master
</code></p>

<p>可以把 master 换成你想要推送的任何分支。</p>

<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>

<p><code>
git remote add origin &lt;server&gt;
</code></p>

<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>

<h3>分支</h3>

<p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>

<p>创建一个叫做“feature_x”的分支，并切换过去：</p>

<p><code>
git checkout -b feature_x
</code></p>

<p>切换回主分支：</p>

<p><code>
git checkout master
</code></p>

<p>再把新建的分支删掉：</p>

<p><code>
git branch -d feature_x
</code></p>

<p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p>

<p><code>
git push origin &lt;branch&gt;
</code></p>

<h3>更新与合并</h3>

<p>要更新你的本地仓库至最新改动，执行：</p>

<p><code>
git pull
</code></p>

<p>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。</p>

<p>要合并其他分支到你的当前分支（例如 master），执行：</p>

<p><code>
git merge &lt;branch&gt;
</code></p>

<p>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>

<p><code>
git add &lt;filename&gt;
</code></p>

<p>在合并改动之前，也可以使用如下命令查看：</p>

<p><code>
git diff &lt;source_branch&gt; &lt;target_branch&gt;
</code></p>

<h3>修复一些错误</h3>

<p>How do you get git to always pull from a specific branch?</p>

<p><code>
$ git config branch.master.remote origin
$ git config branch.master.merge refs/heads/master
</code></p>
]]></content>
  </entry>
  
</feed>
